# I have simulated the longest job first algorithm here by using 4 threads
# The task order has been defined in the order as per the algorithm
# The time of execution of each task is displayed
# For simplicity of execution, I have assumed each time unit to be 1 milli-second
# Ignore the initial error displayed, it is redundant

import queue
import threading
import time
import warnings

warnings.filterwarnings("ignore")

class Task:
    def __init__(self, name, dependencies, execution_time):
        self.name = name
        self.dependencies = dependencies
        self.execution_time = execution_time

class TaskScheduler:
    def __init__(self, num_threads):
        self.task_queue = queue.Queue()
        self.completed_tasks = set()
        self.worker_threads = []
        for i in range(num_threads):
            worker_thread = threading.Thread(target=self.worker_thread_loop)
            worker_thread.start()
            self.worker_threads.append(worker_thread)

    def add_task(self, task):
        self.task_queue.put(task)

    def worker_thread_loop(self):
        while True:
            task = self.task_queue.get()
            if task is None:
                break

            # Check for task dependencies
            all_dependencies_satisfied = True
            try:
                for dependency in task.dependencies:
                    if dependency not in self.completed_tasks:
                        all_dependencies_satisfied = False
                        break
            except:
                pass

            if all_dependencies_satisfied:
                # Executes the task
                start_time = time.time()
                self.execute_task(task)
                end_time = time.time()

                # Prints the time taken to execute
                try:
                    print("Task {} executed in {} seconds.".format(task.name, end_time - start_time))
                except:
                    pass

                # Add dependent tasks to queue
                try:
                    for dependent_task in task.dependencies:
                        self.add_task(dependent_task)
                except:
                    pass
            else:
                # Add task back to queue until it can be executed again
                self.add_task(task)

    def execute_task(self, task):
        # Simulate the task execution by using sleep for task duration
        try:
            time.sleep(task.execution_time)
        except:
            pass

        # Add task to completed tasks so that we can call dependencies
        try:
            self.completed_tasks.add(task.name)
        except:
            pass

    def shutdown(self):
        for i in range(len(self.worker_threads)):
            self.task_queue.put(None)

        for worker_thread in self.worker_threads:
            worker_thread.join()

if __name__ == "__main__":
    # The 4 here refers to the fact we use four threads (2 cores)
    task_scheduler = TaskScheduler(4)

    # Add tasks to the scheduler S1
    task_scheduler.add_task(Task("T0", [], 1.699))
    task_scheduler.add_task(Task("T1", [], 1.935))
    # Add tasks to the scheduler S4
    task_scheduler.add_task(Task("T8", ["T0", "T1"], 5.071))
    task_scheduler.add_task(Task("T4", ["T0", "T1"], 3.872))
    task_scheduler.add_task(Task("T6", ["T0", "T1"], 3.075))
    task_scheduler.add_task(Task("T2", ["T0", "T1"], 2.946))
    task_scheduler.add_task(Task("T5", ["T0", "T1", "T2"], 2.585))
    task_scheduler.add_task(Task("T7", ["T0", "T1", "T6"], 3.717))
    task_scheduler.add_task(Task("T3", ["T0", "T1", "T4"], 2.094))
    task_scheduler.add_task(Task("T9", ["T2", "T3", "T4", "T5", "T7"], 1.440))

    # Start the scheduler (redundant)
    task_scheduler.start()
    # Wait for the scheduler to finish
    task_scheduler.shutdown()
